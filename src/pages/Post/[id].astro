---
export const prerender = true;
import Layout from "@/layouts/Layout.astro";
import { Image } from "astro:assets";
import Footer from "@/components/Footer.astro";
import { obtenerProyectos, initialState } from "@/service/api";
import type { TypeProyects } from "@/types/data";
import { supabase } from "@/api/config";
import { fromToJsonMap } from "@/service/data.service";

const { id } = Astro.params;

const getProjects = async (): Promise<TypeProyects> => {
  try {
    const { data, error } = await supabase
      .from("Proyectos")
      .select("*")
      .eq("id", id)
      .single();
    if (error) throw error;
    const dataProjects = fromToJsonMap(data);
    return dataProjects;
  } catch (error) {
    return initialState;
  }
};
const data: TypeProyects = await getProjects().then((res) => res);

export async function getStaticPaths() {
  const pagesProyects: TypeProyects[] = await obtenerProyectos();
  return pagesProyects.map((item) => ({
    params: { id: item.id },
  }));
}
---

<Layout title="Proyects Moy">
  <section
    class="min-h-screen mx-auto max-w-screen-xl px-6 py-12 bg-gradient-to-b from-[#0f172a] to-[#1a2234]"
  >
    <div class="flex flex-col items-center gap-4 mb-12">
      <h1
        class="text-5xl font-bold bg-gradient-to-r from-cyan-400 to-blue-500 bg-clip-text text-transparent"
      >
        {data.title}
      </h1>
      <span
        class="px-4 py-2 text-sm font-medium bg-cyan-500/20 text-cyan-300 rounded-full shadow-lg shadow-cyan-500/10 backdrop-blur-sm"
      >
        {data.typeProyect}
      </span>
    </div>

    <article class="mx-auto mt-8 sm:max-w-4xl w-full">
      <div
        class={`grid gap-6 ${
          data.typeProyect === "mobile-app"
            ? "grid-cols-2 sm:grid-cols-3"
            : "grid-cols-1 sm:grid-cols-2"
        }`}
      >
        {
          data.imagenesProyect.map((item) => (
            <div class="relative group overflow-hidden rounded-xl">
              <Image
                src={item}
                alt={`${data.title} project screenshot`}
                width={800}
                height={600}
                class="border-2 border-slate-700/50 rounded-xl object-cover object-center transition-all duration-500 group-hover:scale-105 group-hover:border-cyan-400/50 shadow-xl"
              />
              <div class="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
            </div>
          ))
        }
      </div>

      <div class="prose prose-invert mt-12 prose-img:rounded-xl max-w-none">
        <p class="text-lg leading-relaxed text-slate-300 font-light">
          {data.description}
        </p>
      </div>

      <div class="flex flex-wrap gap-4 mt-8">
        {
          !data.link.includes("#") && (
            <a
              href={data.link}
              target="_blank"
              rel="noopener"
              class="flex items-center gap-2 px-6 py-3 text-sm font-medium text-cyan-300 bg-cyan-500/10 rounded-lg hover:bg-cyan-400/20 transition-all duration-300 shadow-lg shadow-cyan-500/5 hover:shadow-cyan-500/20"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="w-5 h-5"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" />
                <polyline points="15 3 21 3 21 9" />
                <line x1="10" y1="14" x2="21" y2="3" />
              </svg>
              Demo Frontend
            </a>
          )
        }
        {
          data.links.backend && (
            <a
              href={data.links.backend}
              target="_blank"
              rel="noopener"
              class="flex items-center gap-2 px-6 py-3 text-sm font-medium text-cyan-300 bg-cyan-500/10 rounded-lg hover:bg-cyan-400/20 transition-all duration-300 shadow-lg shadow-cyan-500/5 hover:shadow-cyan-500/20"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="w-5 h-5"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path d="M5 16V9h14V2H5L19 16h-5.5l-7-7" />
              </svg>
              Docs API
            </a>
          )
        }
      </div>

      <div class="mt-16 space-y-16">
        <article
          class="bg-slate-800/30 rounded-2xl p-8 backdrop-blur-sm border border-slate-700/50"
        >
          <h2
            class="text-3xl font-bold bg-gradient-to-r from-cyan-400 to-blue-500 bg-clip-text text-transparent mb-6"
          >
            Character√≠sticas
          </h2>
          <ul class="grid gap-3 pl-4">
            {
              data.characteristics.map((item) => (
                <li class="flex items-center gap-3 text-slate-300">
                  <svg
                    class="w-5 h-5 text-cyan-400 flex-shrink-0"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M5 13l4 4L19 7"
                    />
                  </svg>
                  <span>{item}</span>
                </li>
              ))
            }
          </ul>
        </article>

        <article
          class="bg-slate-800/30 rounded-2xl p-8 backdrop-blur-sm border border-slate-700/50"
        >
          <h2
            class="text-3xl font-bold bg-gradient-to-r from-cyan-400 to-blue-500 bg-clip-text text-transparent mb-6"
          >
            Technologies
          </h2>
          <ul class="flex flex-wrap gap-3">
            {
              data.tecnologies.map((item) => (
                <li class="px-4 py-2 bg-slate-700/50 text-slate-200 rounded-lg border border-slate-600 hover:border-cyan-400 hover:text-cyan-300 transition-all duration-300 cursor-default shadow-lg hover:shadow-cyan-500/10">
                  {item}
                </li>
              ))
            }
          </ul>
        </article>

        <article
          class="bg-slate-800/30 rounded-2xl p-8 backdrop-blur-sm border border-slate-700/50"
        >
          <h2
            class="text-3xl font-bold bg-gradient-to-r from-cyan-400 to-blue-500 bg-clip-text text-transparent mb-6"
          >
            Aprendizajes
          </h2>
          <ul class="grid gap-3 pl-4">
            {data.learning.map((item) => (
              <li class="flex items-center gap-3 text-slate-300">
                <svg
                  class="w-5 h-5 text-cyan-400 flex-shrink-0"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M9 12l2 2 4-4"
                  />
                </svg>
                <span>{item}</span>
              </li>
            ))}
          </ul>
        </article>
      </div>
    </article>
  </section>
  <Footer />
</Layout>

<style>
  @font-face {
    font-family: "verdana";
    src: url(../../Fonts/verdana.ttf);
  }

  @font-face {
    font-family: "verdana_bold";
    src: url(../../Fonts/verdana-bold.ttf);
  }

  .fontTextDescription {
    font-family: "verdana";
  }

  .fontTextTitle {
    font-family: "verdana_bold";
  }

  .efectHover:hover {
    transition: all 0.3s;
    box-shadow: 1px 1px 15px 2px #ccd3dc;
    color: #1ac0ec;
    font-weight: bold;
  }

  .image-container {
    background-color: #f0f0f0; /* Color de fondo mientras se carga */
  }

  .fade-in {
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
  }

  .fade-in.loaded {
    opacity: 1;
  }
</style>
